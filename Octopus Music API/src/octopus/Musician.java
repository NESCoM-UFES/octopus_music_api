package octopus;


import javax.sound.midi.MidiUnavailableException;

import octopus.communication.MusicalEventSequence;
import octopus.communication.SynthesizerController;
import octopus.communication.midi.MidiSynthesizerController;
/**
 * The Musician is basically an interpreter of the musical structures like:
 * scales, melody, harmony, music, rhythm pattern and so on. The musician knows
 * how to read and play these structures in a very simply form.
 * No instrument restriction or information is considered in this interpretation
 * of musical structures.
 *
 * <p> A technical issue: the musician does not need to know MIDI, OSC or any other
 * communication protocol. This is not his role. His role is understands musical
 * information, mostly related to notes and time. However, to sound musical
 * information generated by computer you must use a synthesizer and, consequently,
 * we must control this synth somehow. For this purpose, the music controller’s
 * classes were created: Player, Playable, MusicalEvent, MusicalEventSequence,
 * JavaSoundPlayer.</p>
 *

 */

public class Musician {


protected SynthesizerController player;
  protected float playingSpeed = 120; //used whem the musical stricuture does not have the BPM

  public Musician() throws MusicPerformanceException  {
    try {
      player = new MidiSynthesizerController();
    }
    catch (MidiUnavailableException ex) {
      throw new MusicPerformanceException("Octopus could not detect any available MIDI device.",ex);
    }

  }

  public Musician(SynthesizerController synthesizerController)  {
   this.player = synthesizerController;
 }


  public void setSynthesizerController(SynthesizerController synthesizerController){
    this.player = synthesizerController;
  }

  public void setPlayingSpeed(float playingSpeed) {
    this.playingSpeed = playingSpeed;  
    player.setBPM(playingSpeed);
  }

  public SynthesizerController getSynthesizerController() {
    return player;
  }

  public double getPlayingSpeed() {
    return playingSpeed;
  }

  public void stop(){
    player.stop();;
  }


 
 public void play(Playable playable)throws MusicPerformanceException{
     MusicalEventSequence p = playable.getMusicalEventSequence();     
     //p.setBpm(this.playingSpeed); 
     //player.setBPM((int)playingSpeed);
     //p.setLoop(false);
     //player.setLoop(false);
     player.setBPM((int)playingSpeed);
     player.play(p);
 }
 
 /*public void play(Playable playable, boolean isLoop)throws MusicPerformanceException{
     MusicalEventSequence p = playable.getMusicalEventSequence();    
    // p.setLoop(isLoop);
     //p.setBpm(this.playingSpeed); 
     //player.setBPM((int)playingSpeed);
     player.setLoop(isLoop);
     player.setBPM((int)playingSpeed);
     player.play(p);
 }*/
 

 
 public void play(MusicalEventSequence musicalEventSequence)throws MusicPerformanceException{   
	 //musicalEventSequence.setBpm(this.playingSpeed);
	 player.setBPM(playingSpeed);
     player.play(musicalEventSequence);
 }

   



}
